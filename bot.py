import logging
from aiogram import Bot, Dispatcher, executor, types
from ConfigPiton import ApiOWM, TokenTwo  # –Ω–µ –∑–∞–±—É–¥—å –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã
import aiogram.utils.markdown as fmt
import aiohttp
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TokenTwo)  # –Ω–µ –∑–∞–±—É–¥—å –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'], commands_prefix='!/')
async def send_welcome(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É `/ start` –∏–ª–∏` / help`  """
    await message.reply(f"–°–∞–ª–∞–º –ê–ª–µ–π–∫—É–º  \n<b>{fmt.quote_html('–≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏')}</b>",
                        parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])
async def send_welcome(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É ` / help`  """
    await message.reply('–≠—Ç–æ –±–æ—Ç –º–æ–≥—É—á–µ–≥–æ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')


@dp.message_handler(commands="specbuttons")
async def cmd_special_buttons(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è", request_location=True,
                                      reply_markup=types.ReplyKeyboardRemove()))
    keyboard.add(types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è", request_contact=True,
                                      reply_markup=types.ReplyKeyboardRemove()))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(commands="inline_url")
async def cmd_inline_url(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="Instagram", url="https://instagram.com"),
        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="https://t.me/rocknrolla_777")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)


# –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É GIF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await message.reply_animation(message.animation.file_id)


# –ö–ª–∞—Å—Å –¥–ª—è FMS
class FindWeather(StatesGroup):
    city = State()
    drink = State()


# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
@dp.message_handler(commands='opros')
async def cmd_start(message: types.Message):
    await FindWeather.city.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")
#" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ "


@dp.message_handler(state=FindWeather.city)
async def process_name(message: types.Message, state: FSMContext):
    city = message.text  # –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await message.answer(
        await get_weather(city)  # –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
    )
    # Finish conversation
    await state.finish()


'''–í–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'''
async def get_weather(city):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        async with aiohttp.ClientSession() as session :
            params = {city: 'city', 'ApiOWM': ApiOWM}
            async with session.get(
                f"https://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={ApiOWM}",params=params) as resp:
                dataInfo = await resp.json()


        data = dataInfo

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        return (f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}¬∞–° {wd}\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n "
                f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!***"
                )
    except:
        return "\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620"
'''  –ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–≥–æ–¥–æ–π '''


# –ö–Ω–æ–ø–∫–∏ –∏–ª–∏ buttons
'''–ø–∏—à—É FSM –ø—Ä–æ –Ω–∞–ø–∏—Ç–∫–∏ '''
@dp.message_handler(commands=['drink'])
async def cmd_buttons_two(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)  # one_time_keyboard=True,
    buttons = ['with Sprite', 'with Coca-Cola', 'with Fanta']
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)
    await FindWeather.drink.set()
''' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–æ–∫ '''


@dp.message_handler(state=FindWeather.drink)
async def process_name(message: types.Message, state: FSMContext):
    drink = message.text  # –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    drink = drink.split(' ')[1]
    await message.answer(
        drink + ' ,—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä'  , reply_markup=types.ReplyKeyboardRemove()
    )
    # Finish conversation
    await state.finish()


@dp.message_handler()
async def echo(message: types.Message):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    await message.answer(message.text)


# –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–π –æ–ø—Ä–æ—Å.  '''
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
